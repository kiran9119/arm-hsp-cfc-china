require 'open3'

def regionID(region)
  regions = {
    "eca01" => "ECA01"
  }

  regionID = regions[region]

  raise "Invalid region (#{region}). Available regions are: #{regions.keys.join ' '}" if regionID.nil?
  regionID
end

def environmentID(environment)
  environments = {
    "prep" => "PREP",
    "prod" => "PROD"
  }

  environmentID = environments[environment]

  raise "Invalid environment (#{environment}). Available environments are: #{environments.keys.join ' '}" if environmentID.nil?
  environmentID
end

def build_deployment_code(environment, region)
  return "#{regionID(region)}-#{environmentID(environment)}"
end

# Configuration Elements
def set_subscription(environment, region)
  subscription_name = "HSP-APPOPS-CFC-#{build_deployment_code(environment, region)}"
  sh "az cloud set --name AzureChinaCloud"
  sh "az account set -s #{subscription_name}"
end

def get_resource_group_infix(environment, region)
  return "#{environmentID(environment)}-#{regionID(region)}"
end

def get_all_resource_groups(environment, region)
  infix = get_resource_group_infix(environment, region)
  {
    "maint_servers" => "HSP-APPOPS-CFC-0-MNT-#{infix}",
    "dd_servers" =>   "HSP-APPOPS-CFC-0-DD-#{infix}",
    "host_servers" =>  "HSP-APPOPS-CFC-0-HST-#{infix}",
    "hr_servers" =>   "HSP-APPOPS-CFC-0-HR-#{infix}",
    "mi_servers" =>   "HSP-APPOPS-CFC-0-MI-#{infix}",
    "mgmt_servers" =>   "HSP-APPOPS-CFC-0-MGMT-#{infix}",
    "pc_servers" =>   "HSP-APPOPS-CFC-0-PCS-#{infix}",
    "wp_servers" =>   "HSP-APPOPS-CFC-0-WP-#{infix}",
    "www_servers" =>   "HSP-APPOPS-CFC-0-WWW-#{infix}",
    "tsk_servers" =>   "HSP-APPOPS-CFC-0-TSK-#{infix}",
    "sql_servers" =>   "HSP-APPOPS-CFC-0-SQL-#{infix}",
    "sqlclus_servers"=> "HSP-APPOPS-CFC-0-CSQL-#{infix}",
    "sqlclus_servers_prod"=> "HSP-APPOPS-CFC-0-CSQL-#{infix}"
  }
end

def get_resource_group(tier, environment, region)
  get_all_resource_groups(environment, region)[tier]
end

def get_region_for_group(region)
  regions = {
    "eca01" => "ChinaEast"
  }
  default_region = 'ChinaEast'
  regions[region].nil? ? default_region : regions[region]
end

# Task generation, should probably not need to edit

resource_group_deployment_directories = Dir.glob('./deploy_*').map do |n|
  n.gsub('./','').gsub('deploy_', '')
end

def to_bool(str)
  return true   if str == true   || str =~ (/(true|t|yes|y|1)$/i)
  return false  if str == false  || str =~ (/(false|f|no|n|0)$/i)
  raise ArgumentError.new("invalid value for Boolean: \"#{str}\"")
end

def create_resource_group(region: , resource_group: )
  stdout, stderr, status = Open3.capture3 "az group exists -n \"#{resource_group}\""
  unless to_bool(stdout.strip)
    puts "Resource group: #{resource_group} in #{region} not found. Creating it."
    sh "az group create -n \"#{resource_group}\" --location #{get_region_for_group(region)}"
  end
end

def deploy(deployment_parameter_directory: , region: , resource_group:, environment: )
  create_resource_group(
    region: region,
    resource_group: resource_group
  )
  parameter_file = "./deploy_#{deployment_parameter_directory}/azuredeploy.parameters.#{region}.#{environment}.json"
  template_file = "./deploy_#{deployment_parameter_directory}/azuredeploy.json"
  parameters = (environment.nil? && region.nil?) ? '' : "--parameters #{parameter_file}"
  raise "You must provide an azuredeploy.json file for deployment: #{deployment_parameter_directory}" if !(File.exist? template_file)
  mode = ENV['DeploymentMode'] == 'Complete' ? '--mode Complete' : '--mode Incremental'
  sh "az group deployment create --template-file #{template_file} --resource-group \"#{resource_group}\" #{mode} #{parameters}"
end

# Tasks
namespace :deploy do
  resource_group_deployment_directories.each do |deployment_directory|
    desc "Deploys the group defined by the parameter file: #{deployment_directory}"
    task deployment_directory.to_sym, [:environment, :region] do |task, args|
      set_subscription(args['environment'],args['region'])
      deploy(
        deployment_parameter_directory: deployment_directory,
        region: args['region'],
        environment: args['environment'],
        resource_group: get_resource_group(deployment_directory, args['environment'], args['region'])
      )
    end
  end

  deploy_tasks = resource_group_deployment_directories.reject do |task|
    task == 'network'
  end.map do |deployment_directory|
    "deploy:#{deployment_directory}"
  end

  multitask all_configurations: deploy_tasks
end

desc 'Deploy all targets in order'
task :deploy, [:environment, :region]=> ["deploy:all_configurations"]

namespace :utils do
  task :git_push_if_needed do
    gitlog = `git log origin/master..master`
    `git push` unless gitlog.length == 0
  end
end

namespace :publish do
  begin
    require 'bump/tasks'
  rescue
    puts 'cannot load bump. skipping.'
  end

  task :package => ['bump:patch'] do
    require 'zip'
    version = Gem::Version::new(File.read('VERSION').gsub!('"',''))
    package_name = 'arm-cfc-china'
    zipfile_path = "#{package_name}-#{version}.zip"

    FileUtils.rm zipfile_path if File.exist? zipfile_path
    input_filenames = FileList["**/*"].reject do |file|
      File.directory?(file)
    end

    Zip::File.open(zipfile_path, Zip::File::CREATE) do |zipfile|
      input_filenames.each do |filename|
        zipfile.add(filename, filename)
      end
    end
  end
end

desc 'package the repo'
task package: ['publish:package']
